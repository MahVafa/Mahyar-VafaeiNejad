import numpy as np
import pandas as pd
import geopy.distance
import folium as fol
from folium.plugins import BeautifyIcon
import matplotlib.pyplot as plt
import random
import math
# In[] GA Parameters
Maxit = 200
Npop = 100
mu = 1.0
pc = 0.3
nc = int(2 * np.round(pc * Npop/2))
pm1 = 0.5
nm1 = int(pm1 * Npop)
pm2 = 0.8
nm2 = int(pm2 * Npop)
M = 1000
points = pd.read_excel(r'C:\Users\mahkam\Desktop\Python Exercises\Data Mining\Hub Points.xlsx')
Cities = np.shape(points)[0]
np.random.seed(seed = 1)
xs = np.random.randint(0,900,Cities)
np.random.seed(seed = 1)
ys = np.random.randint(0,1200,Cities)
Hubs = 2
alpha = 0.4
np.random.seed(seed = 1)
BestValues = []
Values = np.zeros((Npop,1))
Iterations = []
Crossovers = np.zeros((nc,Cities,Cities))
Mutants1 = np.zeros ((nm1,Cities,Cities))
Mutants2 = np.zeros ((nm2,Cities,Cities))
np.random.seed(seed = 1)
# F = np.random.randint(7000000,12000000,Cities)
# F[35] = 0
# F[10] = 0
np.random.seed(seed = 1)
#D = np.random.randint(1,100,(Cities,Cities))
c = np.shape(points)[0]
d = np.zeros((c,c))
w = np.zeros((c,c))
F = np.random.randint(1000000,5000000,c); F[1] = 3000; F[2] = 40000
B = 5000000
for i in range(np.shape(w)[0]):
    for j in range(np.shape(w)[1]):
        if i == j:
            w[i,j] = 0
        else:
            np.random.seed(seed=1)
            w[i,j] = np.random.randint(50,300)  
w[2,:] = np.random.randint(500,1000)
w[:,2] = np.random.randint(500,1000)
w[1,:] = np.random.randint(400,600)
w[:,1] = np.random.randint(400,600);w[1,1] = 0; w[2,2] = 0
coords = pd.DataFrame(0, index = range(c), columns = ('Lat','Lon'))
for i in range(c):
    coords.iloc[i,:] = (points.iloc[i,2], points.iloc[i,1])
for i in range(c):
    for j in range(i,c):
        if i != j:
           d[i,j] = geopy.distance.geodesic(tuple(coords.iloc[i,:]),tuple(coords.iloc[j,:])).km
           d[j,i] = d[i,j]
        else:
           d[i,j] == 0
W = w * d
# In[] Create Random Solution
def Randsol(n):
    Sol1 = np.random.uniform(0,1,(n,n))
    return Sol1
# In[] Distance Matrix
# distance = np.zeros((Cities,Cities))
# for i in range(np.shape(distance)[0]):
#     for j in range(np.shape(distance)[1]):
#         distance[i,j] = math.sqrt((xs[i]-xs[j])**2 + (ys[i]-ys[j])**2)
def Hub_Cost(S):
    H = []
    h = tuple()
    Z_M = np.zeros((Cities,Cities))
    diag = np.diag(S)
    Bests = np.argsort(diag)[-Hubs:][::-1]
    S2 = S.copy()
    c = np.count_nonzero(diag > 0.5)
    for i in range(np.shape(S)[0]):
        if c >= Hubs:
            for j in range(np.shape(Bests)[0]):
                if i == Bests[j] and diag[i] > 0.5:
                    S2[:,i] = 0
                    S2[i,i] = 1
        elif c < Hubs and c > 1:
            if diag[i] > 0.5:
                S2[:,i] = 0
                S2[i,i] = 1            
        elif c == 0 or c == 1:
            m = np.argmax(diag)
            S2[m,m] = 1
        if S2[i,i] < 0.5 or i not in Bests:
            S2[i,i] = 0
            S2[i,:] = 0          
    H = np.argmax(S2,axis=0)
    h_final = h + np.where(np.diag(S2) == 1)
    H_Estab = np.diag(S2)
    for i in range(np.shape(S)[0]):
        for j in range(np.shape(S)[0]):
            if i != j:
                Z_M[i,j] =  W[i,H[i]] + alpha * W[H[i],H[j]] + W[H[j],j]  
            else:
                Z_M[i,j] = 0
    Z1 = np.sum(Z_M)
    Z2 = np.sum(F * H_Estab)
    if Z2 > B:
        Z = 1 * Z1 + 1 * Z2 + 10 * np.count_nonzero(np.diag(S) > 0.5) + (10000* (Z2-B))
    else:
        Z = 1 * Z1 + 1 * Z2 + 10 * np.count_nonzero(np.diag(S) > 0.5)
    return    Z1,Z2, Z, S2, H, h_final, H_Estab , Z_M                                
# In[] Crossovers
def Swaprows(P):
    n = np.shape(P)[0]
    r = random.sample(range(n),2)
    cp1= np.min(r)
    cp2= np.max(r)
    O =np.matrix(P.copy())
    O[[cp1,cp2],:] = O[[cp2,cp1],:]
    return O,P,cp1,cp2
def Swapcolumns(P):
    n = np.shape(P)[0]
    r = random.sample(range(n),2)
    cp1= np.min(r)
    cp2= np.max(r)
    O =np.matrix(P.copy())
    O[:,[cp1,cp2]] = O[:,[cp2,cp1]]
    return O,P,cp1,cp2
def Mut_diag(P):
    n = np.shape(P)[0]
    S = random.sample(range(n),np.random.randint(1,3))
    O = P.copy()
    for k in range(np.shape(S)[0]):
        O[S[k],S[k]] =  O[S[k],S[k]] + np.random.randn() * 0.2
        if O[S[k],S[k]] < 0:
            O[S[k],S[k]] = 0.000011
        else:
            O[S[k],S[k]] = min(O[S[k],S[k]],0.9999)
    return O
# In[] Mutation
def Mutation(P):
    O = P.copy()
    n = np.random.randint(1,max(int(np.ceil(np.shape(P)[0] * np.shape(P)[0] * mu)),5))
    #n = np.random.randint(1,10)
    for i in range(n):
        S = [random.randint(0,Cities-1) for i in range(2)]
        O[S[0],S[1]] = O[S[0],S[1]] + np.random.normal() * 0.08      
        if O[S[0],S[1]] < 0:
            O[S[0],S[1]] = 0.000011
        else:
            O[S[0],S[1]] = min(O[S[0],S[1]],0.9999)      
    return O        
# In[] GA Main Script
Pop = np.array([Randsol(Cities) for i in range(Npop)])
Values = [Hub_Cost(Pop[i])[2] for i in range(np.shape(Pop)[0])]
Sorted_Pop_ind = np.argsort(Values)
Sorted_Pop = Pop[[Sorted_Pop_ind]]
for it in range (1,Maxit+1):
    if it%100 ==0:
        mu= mu/10    
    for c in range(nc):
        P_Index = random.sample(range(0,Npop),1)
        P = Pop[P_Index].reshape([Cities,Cities])
        if np.mod(c,2) == 0:
            Crossovers[c][:] = Swaprows(P)[0]
        else:
            Crossovers[c][:] = Swapcolumns(P)[0]      
    for m in range(0,nm1):
        P_Index = random.sample(range(0,Npop),1)
        P = Pop[P_Index].reshape([Cities,Cities])
        Mutants1[m:] = Mutation(P)
    for m in range(0,nm2):
        P_Index = random.sample(range(0,Npop),1)
        P = Pop[P_Index].reshape([Cities,Cities])
        Mutants2[m:] = Mut_diag(P)
    T_Pop = np.unique(np.vstack((Pop,Crossovers,Mutants1,Mutants2)),axis=0)
    Values = np.array([Hub_Cost(T_Pop[i])[2] for i in range(np.shape(T_Pop)[0])])
    Sorted_Pop_ind = np.argsort(Values)
    T_Pop = T_Pop[[Sorted_Pop_ind]]
    Pop = T_Pop[0:Npop]
    BestValues.append(Hub_Cost(Pop[0])[2])
    print("The Best Cost of Hub IN ITER {} is: {} ".format(it,Hub_Cost(Pop[0])[2]))
    Iterations.append(it)
# In[] Extracting the best solution & Plotting
Bestsol = Hub_Cost(T_Pop[0])[4]
HUBS = Hub_Cost(T_Pop[0])[6]
# fig = plt.figure()
# ax1 = plt.subplots(2,1)
# ax1.plot(Iterations,BestValues,'g--')
# ax1.set_title('Cost Changes By Iterations')
# ax1.set_xlabel('Iterations')
# ax1.set_ylabel('Cost')


map = fol.Map(location=[points.iloc[1,2],points.iloc[1,1]], tiles="CartoDB Positron", zoom_start=5, prefer_canvas = True)

color = ['Olive','Orange','deeppink','light green','Yellow', 'aquamarine']

listicons0 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[1],
    fill_color= color[1],
)

listicons1 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[4],
    fill_color= color[4],
)

listicons2 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[1],
    fill_color= color[1],
)

listicons3 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[3],
    fill_color= color[3],
)

listicons4 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[0],
    fill_color= color[0],
)

listicons5 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[5],
    fill_color= color[5],
)

listicons6 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[5],
    fill_color= color[5],
)

listicons7 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[4],
    fill_color= color[4],
)

listicons8 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[5],
    fill_color= color[5],
)

listicons9 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[0],
    fill_color= color[0],
)

listicons10 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[1],
    fill_color= color[1],
)

listicons11 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[2],
    fill_color= color[2],
)

listicons12 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[3],
    fill_color= color[3],
)

listicons13 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[5],
    fill_color= color[5],
)

listicons14 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[5],
    fill_color= color[5],
)

listicons15 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[2],
    fill_color= color[2],
)

listicons24 = BeautifyIcon(
    icon='star',
    inner_icon_style='font-size:14px',
    border_color= color[5],
    fill_color= color[5],
)



icons_dict = {0:listicons0,1:listicons1,2:listicons2,3:listicons3,4:listicons4,5:listicons5,
              6:listicons6, 7:listicons7, 8:listicons8, 9:listicons9, 10:listicons10, 11:listicons11, 12:listicons12, 13:listicons13, 14:listicons14, 15:listicons15, 24:listicons24}
             


for k in range(points.shape[0]):
    if HUBS[k] ==0:
        fol.Circle([points.iloc[k,2],points.iloc[k,1]],radius = 13000,
                                      color = color[2],
                                      fill_color = color[2],
                                      fill_opacity = 0.8).add_child(fol.Popup(points.iloc[k,0])).add_to(map)
    else:
        fol.Marker([points.iloc[k,2],points.iloc[k,1]],popup = points.iloc[k,0],icon = icons_dict[k]).add_to(map)
       


for i in range(np.shape(Bestsol)[0]):
    fol.PolyLine([[points.iloc[i,2],points.iloc[i,1]],[points.iloc[Bestsol[i],2],points.iloc[Bestsol[i],1]]],color = 'black', dash_array = '10').add_to(map)
            
            
                 
             
#Connecting Hubs to each other:
   
HUB_Connections = pd.DataFrame(False, index = range(c), columns = ['IsHub?'])
HUBSS = []
for k in range(points.shape[0]):
    if HUBS[k] == 1:
        HUB_Connections.iloc[k,0] = True
        HUBSS.append(k)

for k1 in range(len(HUBSS)):
    for k2 in range(len(HUBSS)):
        if k1 != k2:
            fol.PolyLine([[points.iloc[HUBSS[k1],2],points.iloc[HUBSS[k1],1]],[points.iloc[HUBSS[k2],2],points.iloc[HUBSS[k2],1]]],color = 'Blue', dash_array = '10').add_to(map)
# Saving Final Map                  
map.save('HUBMAP_GA.html')

